<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="4dd75353-39b3-45fe-bbf3-c9665db43041" name="Changes" comment="Добавлен метод для поиска и вывода всех книг по части имени автора. Поиск по части книги.&#10;&#10;Добавлен BatchSize к сущности Genre&#10;Добавлен поиск по части имени или части названия книги - в соответствующих репозиториях">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/controller/BookInputHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/controller/BookInputHandler.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/controller/MainMenu.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/controller/MainMenu.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/model/Author.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/model/Author.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/model/Genre.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/model/Genre.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/repository/AuthorRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/repository/AuthorRepository.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/repository/BookRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/repository/BookRepository.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/service/AuthorService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/service/AuthorService.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/service/BookService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/service/BookService.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/utils/BookUtils.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/utils/BookUtils.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/utils/MessageKeys.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/utils/MessageKeys.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/resources/messages_en.properties" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/messages_en.properties" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/resources/messages_ru.properties" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/messages_ru.properties" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="GRADLE">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Itexus-books" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Itexus-books" type="f1a62948:ProjectNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Itexus-books" type="f1a62948:ProjectNode" />
                <item name="Dependencies" type="6de06a37:ExternalSystemViewDefaultContributor$MyDependenciesNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Pull.Settings">
    <option name="OPTIONS">
      <set>
        <option value="FF_ONLY" />
      </set>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="task4" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2mFQ4iWqAU9Xw5dkIhEVzDX7bk2" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;database.data.extractors.current.export.id&quot;: &quot;Comma-separated (CSV)_id&quot;,
    &quot;database.data.extractors.current.id&quot;: &quot;Comma-separated (CSV)_id&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/java/IdeaProjects/Itexus-books/src/main/resources&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Problems&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.24620306&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.42875317&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
    &quot;spring.configuration.checksum&quot;: &quot;ac44b2ac458e8730ee368923faff3492&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  },
  &quot;keyToStringList&quot;: {
    &quot;DatabaseDriversLRU&quot;: [
      &quot;postgresql&quot;
    ],
    &quot;RunConfigurationTargetLRU&quot;: [
      &quot;54e0bcd7-f111-436e-8d01-365e881010a8&quot;,
      &quot;d5713719-c2f9-4ddb-a945-f804c02cd21f&quot;
    ],
    &quot;com.intellij.ide.scratch.LRUPopupBuilder$1/SQL Dialect&quot;: [
      &quot;PostgreSQL&quot;
    ]
  }
}</component>
  <component name="Push.Settings">
    <option name="SHOW_DETAILS_PANEL" value="false" />
  </component>
  <component name="RecentsManager">
    <key name="CreateClassDialog.RecentsKey">
      <recent name="org.example.service" />
      <recent name="org.example1" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\java\IdeaProjects\Itexus-books\src\main\resources" />
      <recent name="C:\java\IdeaProjects\Itexus-books" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\java\IdeaProjects\Itexus-books\src\main\resources" />
      <recent name="C:\java\IdeaProjects\Itexus-books\src\main\resources\properties" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="org.example" />
      <recent name="org.example.repository" />
      <recent name="org.example.model" />
    </key>
  </component>
  <component name="RunManager" selected="Application.Books">
    <configuration name="Application" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="org.example.Application" />
      <module name="Itexus-books.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.example.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Application1" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="org.example.Application1" />
      <module name="Itexus-books.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.example.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Books" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="org.example.Books" />
      <module name="Itexus-books.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.example.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="db.sql" type="DatabaseScript" editBeforeRun="true" temporary="true" nameIsGenerated="true">
      <script-file value="$PROJECT_DIR$/src/main/resources/db.sql" />
      <script-mode>FILE</script-mode>
      <data-source id="d5713719-c2f9-4ddb-a945-f804c02cd21f" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="docker-deploy" factoryName="docker-compose.yml" temporary="true">
      <deployment type="docker-compose.yml">
        <settings />
      </deployment>
      <method v="2" />
    </configuration>
    <configuration name="docker-compose.yaml: Compose Deployment" type="docker-deploy" factoryName="docker-compose.yml" temporary="true" server-name="Docker">
      <deployment type="docker-compose.yml">
        <settings>
          <option name="sourceFilePath" value="docker-compose.yaml" />
        </settings>
      </deployment>
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Application.Application1" />
      <item itemvalue="Application.Books" />
      <item itemvalue="Application.Application" />
      <item itemvalue="Database Script.db.sql" />
      <item itemvalue="Docker.docker-compose.yaml: Compose Deployment" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Application.Books" />
        <item itemvalue="Application.Application1" />
        <item itemvalue="Application.Application" />
        <item itemvalue="Database Script.db.sql" />
        <item itemvalue="Docker.docker-compose.yaml: Compose Deployment" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="SpringBeansView">
    <option name="beanDetailsProportion" value="0.3" />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="4dd75353-39b3-45fe-bbf3-c9665db43041" name="Changes" comment="" />
      <created>1726669661154</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1726669661154</updated>
      <workItem from="1726669662556" duration="12396000" />
      <workItem from="1726686637765" duration="2691000" />
      <workItem from="1726815121965" duration="4448000" />
      <workItem from="1726841914179" duration="33294000" />
      <workItem from="1726984136279" duration="11500000" />
      <workItem from="1727028497024" duration="1766000" />
      <workItem from="1727077632700" duration="16905000" />
      <workItem from="1727166318149" duration="3877000" />
      <workItem from="1727245826689" duration="2403000" />
      <workItem from="1727339438086" duration="5810000" />
      <workItem from="1727366027918" duration="10271000" />
      <workItem from="1727463624061" duration="2649000" />
      <workItem from="1727506941813" duration="5826000" />
      <workItem from="1727517500209" duration="2260000" />
      <workItem from="1727520644687" duration="6248000" />
      <workItem from="1727593907250" duration="29541000" />
      <workItem from="1727685666738" duration="654000" />
      <workItem from="1728381179095" duration="26538000" />
      <workItem from="1728631286468" duration="4164000" />
      <workItem from="1728908832288" duration="25947000" />
      <workItem from="1729003953308" duration="3961000" />
      <workItem from="1729008014472" duration="1293000" />
      <workItem from="1729240705007" duration="21625000" />
      <workItem from="1729323360699" duration="37299000" />
      <workItem from="1729593678532" duration="1148000" />
      <workItem from="1730128886098" duration="599000" />
      <workItem from="1730225547032" duration="1698000" />
      <workItem from="1730717109331" duration="30177000" />
      <workItem from="1731351597157" duration="2036000" />
      <workItem from="1731414015021" duration="26314000" />
      <workItem from="1731576257982" duration="8027000" />
      <workItem from="1731689016595" duration="1372000" />
      <workItem from="1731913090895" duration="13242000" />
      <workItem from="1732123612066" duration="2227000" />
      <workItem from="1732195250493" duration="4762000" />
      <workItem from="1732686518691" duration="2704000" />
      <workItem from="1733507644909" duration="24343000" />
      <workItem from="1734057077346" duration="17248000" />
      <workItem from="1734163819006" duration="5362000" />
      <workItem from="1734365124189" duration="22180000" />
      <workItem from="1734518370572" duration="8735000" />
      <workItem from="1734546006114" duration="2489000" />
      <workItem from="1734589344377" duration="13219000" />
      <workItem from="1734631594948" duration="5462000" />
      <workItem from="1734709633319" duration="2831000" />
      <workItem from="1734757939113" duration="21475000" />
      <workItem from="1734849392158" duration="6577000" />
      <workItem from="1734893072341" duration="2274000" />
      <workItem from="1734937802738" duration="20794000" />
      <workItem from="1735109618594" duration="3213000" />
      <workItem from="1735384383947" duration="1073000" />
      <workItem from="1735407671576" duration="1672000" />
      <workItem from="1735416732880" duration="2106000" />
      <workItem from="1735462764856" duration="6515000" />
      <workItem from="1735540206119" duration="9510000" />
      <workItem from="1735629647719" duration="9805000" />
      <workItem from="1735797560122" duration="10370000" />
      <workItem from="1735893241348" duration="1627000" />
      <workItem from="1736424686256" duration="1957000" />
      <workItem from="1736582050768" duration="591000" />
      <workItem from="1737097908414" duration="8831000" />
      <workItem from="1737183711849" duration="608000" />
      <workItem from="1737353439886" duration="7748000" />
      <workItem from="1737440186822" duration="7755000" />
      <workItem from="1737527578440" duration="16049000" />
      <workItem from="1737624047583" duration="7454000" />
      <workItem from="1737696992024" duration="11542000" />
      <workItem from="1737973857328" duration="5320000" />
      <workItem from="1738221368945" duration="18228000" />
      <workItem from="1738260762419" duration="599000" />
      <workItem from="1738304485253" duration="7680000" />
      <workItem from="1738578596213" duration="7530000" />
      <workItem from="1738651632889" duration="9004000" />
      <workItem from="1738674163170" duration="11914000" />
      <workItem from="1738776580056" duration="827000" />
      <workItem from="1738822917983" duration="10174000" />
      <workItem from="1738907875216" duration="16873000" />
      <workItem from="1739086589390" duration="10392000" />
      <workItem from="1739185933578" duration="1638000" />
    </task>
    <task id="LOCAL-00001" summary="Initial commit">
      <created>1727095638353</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1727095638353</updated>
    </task>
    <task id="LOCAL-00002" summary="Добавлен выбор и поддержка русского и английского языка из property файлов&#10;&#10;добавлено меню для выбора языка - MainMenu.language&#10;добавлена утилита BookUtils для вывода списка всех книг с учетом локали&#10;Реализован выбор сообщений на 2 языках с помощью класса MessageSource и 4 properties файла в 2 группы">
      <created>1727641825169</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1727641825169</updated>
    </task>
    <task id="LOCAL-00003" summary="Константы цвета для вывода в консоль вынесены в property файл &#10;&#10;добавлен property файл color.properties">
      <created>1729000210178</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1729000210178</updated>
    </task>
    <task id="LOCAL-00004" summary="добавлено логирование значения параметров вызова и выходное значение всех сервисных методов">
      <created>1729411092608</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1729411092608</updated>
    </task>
    <task id="LOCAL-00005" summary="добавлена возможность поиска книги по имени">
      <created>1729432319114</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1729432319114</updated>
    </task>
    <task id="LOCAL-00006" summary="Добавлено кеширование данных книги &#10;&#10;При поиске данных книги по ее имени эти данные кешируются в классе LoggingAspect в Map. При повторном запросе такой же книги, ее данные не читаются с диска, а выдаются из кеша. При изменении, добавлении или удалении книги кеш стирается">
      <created>1729453227825</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1729453227825</updated>
    </task>
    <task id="LOCAL-00007" summary="Добавлен инициализационный SQL-скрипт создания таблиц &#10;&#10;Три таблицы, авторы, жанры и книги">
      <created>1733865102230</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1733865102230</updated>
    </task>
    <task id="LOCAL-00008" summary="Обращение к CSV файлу заменено на работу с БД через Spring JDBC">
      <created>1734974956329</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1734974956329</updated>
    </task>
    <task id="LOCAL-00009" summary="Строки-ключи для сообщений messageSource.getMessage вынесены в одельный файл&#10;&#10;Создан абстрактный класс MessageKeys, в котором содержатся все строки-константы для сообщений messageSource.getMessage&#10;&#10;убраны упоминания про CSV и переключение профилей">
      <created>1737373801941</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1737373801941</updated>
    </task>
    <task id="LOCAL-00010" summary="Замена JDBC на Hibernate &#10;&#10;Добавлена конфигурация hibernate и создан бин SessionFactory в AppConfig &#10;&#10;Добавлены аннотации для мапинга сущностей.">
      <created>1737739145583</created>
      <option name="number" value="00010" />
      <option name="presentableId" value="LOCAL-00010" />
      <option name="project" value="LOCAL" />
      <updated>1737739145583</updated>
    </task>
    <task id="LOCAL-00011" summary="Добавлено удаление автора&#10;&#10;Добавлен пункт меню &quot;удаление автора&quot;.&#10;При удалении автора из-за cascade = CascadeType.ALL удаляются все его книги &#10;Вынес CRUD методы автора в отдельный сервисный класс">
      <created>1738670236996</created>
      <option name="number" value="00011" />
      <option name="presentableId" value="LOCAL-00011" />
      <option name="project" value="LOCAL" />
      <updated>1738670236996</updated>
    </task>
    <task id="LOCAL-00012" summary="Добавлен класс для заполнения БД и проверки пакетного выполнения операций&#10;&#10;Добавлен класс DatabaseInitializer, в котором очищаются таблицы БД и заполняются 5 авторами, жанрами и книгами.">
      <created>1738697032722</created>
      <option name="number" value="00012" />
      <option name="presentableId" value="LOCAL-00012" />
      <option name="project" value="LOCAL" />
      <updated>1738697032722</updated>
    </task>
    <option name="localTasksCounter" value="13" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="branch">
                    <value>
                      <list>
                        <option value="task3" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Initial commit" />
    <MESSAGE value="Добавлен выбор и поддержка русского и английского языка из property файлов&#10;&#10;добавлено меню для выбора языка - MainMenu.language&#10;добавлена утилита BookUtils для вывода списка всех книг с учетом локали&#10;Реализован выбор сообщений на 2 языках с помощью класса MessageSource и 4 properties файла в 2 группы" />
    <MESSAGE value="Константы цвета для вывода в консоль вынесены в property файл &#10;&#10;добавлен property файл color.properties" />
    <MESSAGE value="добавлено логирование значения параметров вызова и выходное значение всех сервисных методов" />
    <MESSAGE value="добавлена возможность поиска книги по имени" />
    <MESSAGE value="Добавлено кеширование данных книги &#10;&#10;При поиске данных книги по ее имени эти данные кешируются в классе LoggingAspect в Map. При повторном запросе такой же книги, ее данные не читаются с диска, а выдаются из кеша. При изменении, добавлении или удалении книги кеш стирается" />
    <MESSAGE value="Добавлен инициализационный SQL-скрипт создания таблиц &#10;&#10;Три таблицы, авторы, жанры и книги" />
    <MESSAGE value="Обращение к CSV файлу заменено на работу с БД через Spring JDBC" />
    <MESSAGE value="Строки-ключи для сообщений messageSource.getMessage вынесены в одельный файл&#10;&#10;Создан абстрактный класс MessageKeys, в котором содержатся все строки-константы для сообщений messageSource.getMessage&#10;&#10;убраны упоминания про CSV и переключение профилей" />
    <MESSAGE value="Замена JDBC на Hibernate &#10;&#10;Добавлена конфигурация hibernate и создан бин SessionFactory в AppConfig &#10;&#10;Добавлены аннотации для мапинга сущностей." />
    <MESSAGE value="Добавлено удаление автора&#10;&#10;Добавлен пункт меню &quot;удаление автора&quot;.&#10;При удалении автора из-за cascade = CascadeType.ALL удаляются все его книги &#10;Вынес CRUD методы автора в отдельный сервисный класс" />
    <MESSAGE value="Добавлен класс для заполнения БД и проверки пакетного выполнения операций&#10;&#10;Добавлен класс DatabaseInitializer, в котором очищаются таблицы БД и заполняются 5 авторами, жанрами и книгами." />
    <MESSAGE value="Добавлен метод для поиска и вывода всех книг по части имени автора. Поиск по части книги.&#10;&#10;Добавлен BatchSize к сущности Genre&#10;Добавлен поиск по части имени или части названия книги - в соответствующих репозиториях" />
    <option name="LAST_COMMIT_MESSAGE" value="Добавлен метод для поиска и вывода всех книг по части имени автора. Поиск по части книги.&#10;&#10;Добавлен BatchSize к сущности Genre&#10;Добавлен поиск по части имени или части названия книги - в соответствующих репозиториях" />
  </component>
  <component name="XDebuggerManager">
    <pin-to-top-manager>
      <pinned-members>
        <PinnedItemInfo parentTag="org.example.repository.AuthorRepository" memberName="sessionFactory" />
      </pinned-members>
    </pin-to-top-manager>
    <watches-manager>
      <configuration name="GradleRunConfiguration">
        <watch expression="bookRepository.readAll().get(2)" language="JAVA" />
      </configuration>
    </watches-manager>
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
  <component name="com.github.evgenys91.machinet.common.dslhistory.DslHistoryState">
    <option name="historyDtoById">
      <map>
        <entry key="1f2a15">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/repository/BookRepository.java" />
                  <option value="$PROJECT_DIR$/src/main/resources/hibernate.properties" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Book.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Genre.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Author.java" />
                </list>
              </option>
              <option name="id" value="1f2a15" />
              <option name="initiateTms" value="1739119255758" />
              <option name="request" value=" При данном коде, сейчас не включен кеш 2 и 3 уровня. При первом запросе книги по части имени идет запрос в БД, но повторный такой же запрос книги по части имени через метод findByName класса BookRepository срабатывает без запроса в БД. То есть видимо через кеш. Через какой кеш, каким образом hibernate может брать данные List&lt;Book&gt;. В методе findByName класса BookRepository сессия каждый раз открывается и закрывается." />
              <option name="response" value="" />
              <option name="responseDescription" value="Если кэш второго и третьего уровня не включен, но повторный запрос через метод `findByName` возвращает данные без обращения к базе данных, это может быть связано с первичным кэшем (First-Level Cache). Однако, как вы правильно заметили, сессия каждый раз открывается и закрывается, что должно сбрасывать первичный кэш.&#10;&#10;В таком случае, вероятно, что Hibernate использует внутренние механизмы оптимизации, такие как контекст персистентности или кэширование на уровне JDBC драйвера. Давайте рассмотрим возможные причины более подробно:&#10;&#10;1. **Контекст персистентности (Persistence Context)**:&#10;   - Первичный кэш работает на уровне сессии (`Session`). Если сессия открыта и объект уже загружен в текущую сессию, Hibernate будет использовать его из кэша, а не загружать его заново из базы данных.&#10;   - Однако, в вашем случае сессия каждый раз открывается и закрывается, что должно сбрасывать первичный кэш.&#10;&#10;2. **Кэширование на уровне JDBC драйвера**:&#10;   - Некоторые JDBC драйверы могут кэшировать результаты запросов на уровне драйвера. Это может объяснить, почему повторный запрос возвращает данные без обращения к базе данных.&#10;   - Это поведение зависит от конкретного JDBC драйвера и его настроек.&#10;&#10;3. **Кэширование на уровне базы данных**:&#10;   - Некоторые базы данных могут кэшировать результаты запросов на уровне сервера базы данных. Это может объяснить, почему повторный запрос возвращает данные быстро.&#10;   - Это поведение зависит от конкретной базы данных и ее настроек.&#10;&#10;4. **Hibernate SessionFactory-level Caching**:&#10;   - Хотя это не является стандартным поведением, некоторые реализации могут использовать кэширование на уровне `SessionFactory` для оптимизации повторных запросов.&#10;&#10;### Проверка и диагностика&#10;&#10;Для точного определения причины, можно выполнить следующие шаги:&#10;&#10;1. **Включить логирование SQL запросов**:&#10;   - Убедитесь, что все SQL запросы логируются. Это поможет понять, выполняется ли фактически запрос к базе данных.&#10;   - В `hibernate.properties`:&#10;     ```properties&#10;     hibernate.show_sql=true&#10;     hibernate.format_sql=true&#10;     hibernate.use_sql_comments=true&#10;     ```&#10;&#10;2. **Проверить настройки JDBC драйвера**:&#10;   - Убедитесь, что JDBC драйвер не кэширует результаты запросов. Это можно сделать, проверив документацию и настройки драйвера.&#10;&#10;3. **Проверить настройки базы данных**:&#10;   - Убедитесь, что база данных не кэширует результаты запросов. Это можно сделать, проверив документацию и настройки базы данных.&#10;&#10;### Пример кода для логирования запросов&#10;&#10;```java&#10;public List&lt;Book&gt; findByName(String name) {&#10;    List&lt;Book&gt; books = new ArrayList&lt;&gt;();&#10;    try (Session session = sessionFactory.openSession()) {&#10;        session.beginTransaction();&#10;        books = session.createQuery(&quot;from Book where title like :name&quot;, Book.class)&#10;                       .setParameter(&quot;name&quot;, &quot;%&quot; + name + &quot;%&quot;)&#10;                       .list();&#10;        session.getTransaction().commit();&#10;    } catch (Exception e) {&#10;        e.printStackTrace();&#10;    }&#10;    return books;&#10;}&#10;```&#10;&#10;### Заключение&#10;&#10;Если кэш второго и третьего уровня не включен, но повторный запрос возвращает данные без обращения к базе данных, это может быть связано с кэшированием на уровне JDBC драйвера или базы данных. Включение логирования SQL запросов поможет точно определить, выполняется ли фактически запрос к базе данных." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1739119268706" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Genre.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Book.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Author.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/repository/BookRepository.java" />
                  <option value="$PROJECT_DIR$/src/main/resources/hibernate.properties" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="58e22b">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$USER_HOME$/.gradle/caches/modules-2/files-2.1/org.hibernate/hibernate-core/5.6.11.Final/f6332e6fbc4634e7aeccd24a5c527a2da31e9f11/hibernate-core-5.6.11.Final-sources.jar!/org/hibernate/graph/GraphSemantic.java" />
                  <option value="$PROJECT_DIR$/src/main/resources/hibernate.properties" />
                </list>
              </option>
              <option name="id" value="58e22b" />
              <option name="initiateTms" value="1739117073582" />
              <option name="request" value=" какие есть уровни кэшей в Hibernate?" />
              <option name="response" value="" />
              <option name="responseDescription" value="В Hibernate существует несколько уровней кэширования, которые помогают улучшить производительность за счет уменьшения количества обращений к базе данных. Основные уровни кэширования в Hibernate:&#10;&#10;1. **Первичный кэш (First-Level Cache)**:&#10;   - Это кэш, который встроен в Hibernate и работает на уровне сессии (`Session`). Он автоматически включен и не требует дополнительной настройки.&#10;   - Все объекты, загруженные в рамках одной сессии, хранятся в этом кэше. Если объект уже загружен в текущую сессию, Hibernate будет использовать его из кэша, а не загружать его заново из базы данных.&#10;   - Этот кэш действует только в пределах одной сессии и не доступен за ее пределами.&#10;&#10;2. **Вторичный кэш (Second-Level Cache)**:&#10;   - Это кэш, который работает на уровне сессии фабрики (`SessionFactory`). Он может быть настроен и включен отдельно.&#10;   - Вторичный кэш позволяет кэшировать объекты между сессиями, что может значительно улучшить производительность при многократном доступе к одним и тем же данным.&#10;   - Для использования второго уровня кэша необходимо настроить соответствующий провайдер кэша (например, EHCache, Infinispan и т.д.) и аннотировать сущности, которые должны кэшироваться.&#10;&#10;3. **Кэш запросов (Query Cache)**:&#10;   - Это кэш, который используется для кэширования результатов запросов. Он работает в связке с вторичным кэшем.&#10;   - Кэш запросов позволяет кэшировать результаты HQL или Criteria запросов, что может быть полезно для часто выполняемых запросов с неизменяющимися результатами.&#10;   - Для использования кэша запросов необходимо включить его в настройках Hibernate и явно указать, какие запросы должны кэшироваться.&#10;&#10;### Пример настройки второго уровня кэша и кэша запросов в Hibernate&#10;&#10;#### Включение второго уровня кэша в `hibernate.properties`:&#10;```properties&#10;# Включение второго уровня кэша&#10;hibernate.cache.use_second_level_cache=true&#10;&#10;# Указание провайдера кэша (например, EHCache)&#10;hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory&#10;&#10;# Включение кэша запросов&#10;hibernate.cache.use_query_cache=true&#10;```&#10;&#10;#### Аннотация сущностей для кэширования:&#10;```java&#10;import javax.persistence.Entity;&#10;import javax.persistence.Cacheable;&#10;import org.hibernate.annotations.Cache;&#10;import org.hibernate.annotations.CacheConcurrencyStrategy;&#10;&#10;@Entity&#10;@Cacheable&#10;@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)&#10;public class MyEntity {&#10;    // поля и методы&#10;}&#10;```&#10;&#10;#### Использование кэша запросов:&#10;```java&#10;List&lt;MyEntity&gt; results = session.createQuery(&quot;from MyEntity&quot;)&#10;                                .setCacheable(true)&#10;                                .list();&#10;```&#10;&#10;Эти уровни кэширования позволяют гибко настраивать производительность приложения, используя возможности Hibernate для уменьшения нагрузки на базу данных." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1739117087536" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/resources/hibernate.properties" />
                  <option value="$USER_HOME$/.gradle/caches/modules-2/files-2.1/org.hibernate/hibernate-core/5.6.11.Final/f6332e6fbc4634e7aeccd24a5c527a2da31e9f11/hibernate-core-5.6.11.Final-sources.jar!/org/hibernate/graph/GraphSemantic.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="a213f8">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/repository/BookRepository.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Book.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Genre.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Author.java" />
                </list>
              </option>
              <option name="id" value="a213f8" />
              <option name="initiateTms" value="1739118936065" />
              <option name="request" value=" почему повторный запрос через метод findByName класса BookRepository происходит из кеша?" />
              <option name="response" value="" />
              <option name="responseDescription" value="Повторный запрос через метод `findByName` класса `BookRepository` может происходить из кэша по нескольким причинам, связанным с механизмами кэширования Hibernate. Рассмотрим основные из них:&#10;&#10;1. **Первичный кэш (First-Level Cache)**:&#10;   - Как уже упоминалось, первичный кэш работает на уровне сессии (`Session`). Если в рамках одной сессии вы выполняете несколько запросов, и один из них уже загрузил объект с определенным идентификатором, последующие запросы за этим объектом будут обслуживаться из первичного кэша.&#10;   - Например, если вы вызываете метод `findByName` несколько раз в одной и той же сессии, и объекты с соответствующими именами уже были загружены, Hibernate будет использовать объекты из первичного кэша.&#10;&#10;2. **Вторичный кэш (Second-Level Cache)**:&#10;   - Вторичный кэш работает на уровне сессии фабрики (`SessionFactory`) и позволяет кэшировать объекты между сессиями. Если сущности, возвращаемые методом `findByName`, аннотированы для кэширования во втором уровне кэша, и кэш настроен правильно, то повторные запросы могут обслуживаться из второго уровня кэша.&#10;   - Для этого необходимо, чтобы сущности `Book` были аннотированы для кэширования, и соответствующий провайдер кэша был настроен.&#10;&#10;3. **Кэш запросов (Query Cache)**:&#10;   - Кэш запросов позволяет кэшировать результаты HQL или Criteria запросов. Если метод `findByName` настроен для использования кэша запросов, и кэш запросов включен в настройках Hibernate, то результаты запроса могут быть кэшированы.&#10;   - Для этого необходимо явно указать, что запрос должен быть кэшируемым, используя метод `setCacheable(true)`.&#10;&#10;### Пример настройки кэширования для метода `findByName`&#10;&#10;#### Настройка второго уровня кэша и кэша запросов в `hibernate.properties`:&#10;```properties&#10;# Включение второго уровня кэша&#10;hibernate.cache.use_second_level_cache=true&#10;&#10;# Указание провайдера кэша (например, EHCache)&#10;hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory&#10;&#10;# Включение кэша запросов&#10;hibernate.cache.use_query_cache=true&#10;```&#10;&#10;#### Аннотация сущности `Book` для кэширования:&#10;```java&#10;import javax.persistence.Entity;&#10;import javax.persistence.Cacheable;&#10;import org.hibernate.annotations.Cache;&#10;import org.hibernate.annotations.CacheConcurrencyStrategy;&#10;&#10;@Entity&#10;@Cacheable&#10;@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)&#10;public class Book {&#10;    // поля и методы&#10;}&#10;```&#10;&#10;#### Изменение метода `findByName` для использования кэша запросов:&#10;```java&#10;public List&lt;Book&gt; findByName(String name) {&#10;    List&lt;Book&gt; books = new ArrayList&lt;&gt;();&#10;    try (Session session = sessionFactory.openSession()) {&#10;        session.beginTransaction();&#10;        books = session.createQuery(&quot;from Book where title like :name&quot;, Book.class)&#10;                       .setParameter(&quot;name&quot;, &quot;%&quot; + name + &quot;%&quot;)&#10;                       .setCacheable(true)  // Указываем, что запрос должен быть кэшируемым&#10;                       .list();&#10;        session.getTransaction().commit();&#10;    } catch (Exception e) {&#10;        e.printStackTrace();&#10;    }&#10;    return books;&#10;}&#10;```&#10;&#10;### Заключение&#10;Повторный запрос через метод `findByName` может происходить из кэша, если:&#10;- Запрос выполняется в рамках одной сессии, и объекты уже загружены в первичный кэш.&#10;- Сущности `Book` аннотированы для кэширования во втором уровне кэша, и кэш настроен правильно.&#10;- Кэш запросов включен и настроен, и запрос помечен как кэшируемый.&#10;&#10;Эти механизмы кэширования позволяют значительно улучшить производительность приложения, уменьшая количество обращений к базе данных." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1739118951421" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Genre.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Book.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Author.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/repository/BookRepository.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>