<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="4dd75353-39b3-45fe-bbf3-c9665db43041" name="Changes" comment="Обращение к CSV файлу заменено на работу с БД через Spring JDBC">
      <change afterPath="$PROJECT_DIR$/.idea/dataSources.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/.idea/encodings.xml" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/org/example/utils/MessageKeys.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/build.gradle" beforeDir="false" afterPath="$PROJECT_DIR$/build.gradle" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/config/AppConfig.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/config/AppConfig.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/controller/BookInputHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/controller/BookInputHandler.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/controller/MainMenu.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/controller/MainMenu.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/repository/AuthorRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/repository/AuthorRepository.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/repository/BookRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/repository/BookRepository.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/repository/GenreRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/repository/GenreRepository.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/service/BookService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/service/BookService.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/utils/BookUtils.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/utils/BookUtils.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/resources/application-csv.properties" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/resources/application-sql.properties" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/application.properties" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/resources/books.csv" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/books.csv" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="GRADLE">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Itexus-books" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Itexus-books" type="f1a62948:ProjectNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="Itexus-books" type="f1a62948:ProjectNode" />
                <item name="Dependencies" type="6de06a37:ExternalSystemViewDefaultContributor$MyDependenciesNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Pull.Settings">
    <option name="OPTIONS">
      <set>
        <option value="FF_ONLY" />
      </set>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="task4" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2mFQ4iWqAU9Xw5dkIhEVzDX7bk2" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;database.data.extractors.current.export.id&quot;: &quot;Comma-separated (CSV)_id&quot;,
    &quot;database.data.extractors.current.id&quot;: &quot;Comma-separated (CSV)_id&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/java/IdeaProjects/Itexus-books/src/main/resources&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Problems&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.24620306&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.42875317&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
    &quot;spring.configuration.checksum&quot;: &quot;ac44b2ac458e8730ee368923faff3492&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  },
  &quot;keyToStringList&quot;: {
    &quot;DatabaseDriversLRU&quot;: [
      &quot;postgresql&quot;
    ],
    &quot;RunConfigurationTargetLRU&quot;: [
      &quot;54e0bcd7-f111-436e-8d01-365e881010a8&quot;,
      &quot;d5713719-c2f9-4ddb-a945-f804c02cd21f&quot;
    ],
    &quot;com.intellij.ide.scratch.LRUPopupBuilder$1/SQL Dialect&quot;: [
      &quot;PostgreSQL&quot;
    ]
  }
}</component>
  <component name="Push.Settings">
    <option name="SHOW_DETAILS_PANEL" value="false" />
  </component>
  <component name="RecentsManager">
    <key name="CreateClassDialog.RecentsKey">
      <recent name="org.example.service" />
      <recent name="org.example1" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\java\IdeaProjects\Itexus-books\src\main\resources" />
      <recent name="C:\java\IdeaProjects\Itexus-books" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\java\IdeaProjects\Itexus-books\src\main\resources" />
      <recent name="C:\java\IdeaProjects\Itexus-books\src\main\resources\properties" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="org.example.repository" />
      <recent name="org.example.model" />
    </key>
  </component>
  <component name="RunManager" selected="Application.Books">
    <configuration name="Books" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="org.example.Books" />
      <module name="Itexus-books.main" />
      <option name="VM_PARAMETERS" value="-Dconsole.encoding=UTF-8 -Dfile.encoding=UTF-8" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.example.config.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="MainMenu" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="org.example.MainMenu" />
      <module name="Itexus-books.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.example.config.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Test" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="org.example.Test" />
      <module name="Itexus-books.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.example.config.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="db.sql" type="DatabaseScript" editBeforeRun="true" temporary="true" nameIsGenerated="true">
      <script-file value="$PROJECT_DIR$/src/main/resources/db.sql" />
      <script-mode>FILE</script-mode>
      <data-source id="d5713719-c2f9-4ddb-a945-f804c02cd21f" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="docker-deploy" factoryName="docker-compose.yml" temporary="true">
      <deployment type="docker-compose.yml">
        <settings />
      </deployment>
      <method v="2" />
    </configuration>
    <configuration name="docker-compose.yaml: Compose Deployment" type="docker-deploy" factoryName="docker-compose.yml" temporary="true" server-name="Docker">
      <deployment type="docker-compose.yml">
        <settings>
          <option name="sourceFilePath" value="docker-compose.yaml" />
        </settings>
      </deployment>
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Application.Test" />
      <item itemvalue="Application.MainMenu" />
      <item itemvalue="Application.Books" />
      <item itemvalue="Database Script.db.sql" />
      <item itemvalue="Docker.docker-compose.yaml: Compose Deployment" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Database Script.db.sql" />
        <item itemvalue="Docker.docker-compose.yaml: Compose Deployment" />
        <item itemvalue="Application.Test" />
        <item itemvalue="Application.MainMenu" />
        <item itemvalue="Application.Books" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="SpringBeansView">
    <option name="beanDetailsProportion" value="0.3" />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="4dd75353-39b3-45fe-bbf3-c9665db43041" name="Changes" comment="" />
      <created>1726669661154</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1726669661154</updated>
      <workItem from="1726669662556" duration="12396000" />
      <workItem from="1726686637765" duration="2691000" />
      <workItem from="1726815121965" duration="4448000" />
      <workItem from="1726841914179" duration="33294000" />
      <workItem from="1726984136279" duration="11500000" />
      <workItem from="1727028497024" duration="1766000" />
      <workItem from="1727077632700" duration="16905000" />
      <workItem from="1727166318149" duration="3877000" />
      <workItem from="1727245826689" duration="2403000" />
      <workItem from="1727339438086" duration="5810000" />
      <workItem from="1727366027918" duration="10271000" />
      <workItem from="1727463624061" duration="2649000" />
      <workItem from="1727506941813" duration="5826000" />
      <workItem from="1727517500209" duration="2260000" />
      <workItem from="1727520644687" duration="6248000" />
      <workItem from="1727593907250" duration="29541000" />
      <workItem from="1727685666738" duration="654000" />
      <workItem from="1728381179095" duration="26538000" />
      <workItem from="1728631286468" duration="4164000" />
      <workItem from="1728908832288" duration="25947000" />
      <workItem from="1729003953308" duration="3961000" />
      <workItem from="1729008014472" duration="1293000" />
      <workItem from="1729240705007" duration="21625000" />
      <workItem from="1729323360699" duration="37299000" />
      <workItem from="1729593678532" duration="1148000" />
      <workItem from="1730128886098" duration="599000" />
      <workItem from="1730225547032" duration="1698000" />
      <workItem from="1730717109331" duration="30177000" />
      <workItem from="1731351597157" duration="2036000" />
      <workItem from="1731414015021" duration="26314000" />
      <workItem from="1731576257982" duration="8027000" />
      <workItem from="1731689016595" duration="1372000" />
      <workItem from="1731913090895" duration="13242000" />
      <workItem from="1732123612066" duration="2227000" />
      <workItem from="1732195250493" duration="4762000" />
      <workItem from="1732686518691" duration="2704000" />
      <workItem from="1733507644909" duration="24343000" />
      <workItem from="1734057077346" duration="17248000" />
      <workItem from="1734163819006" duration="5362000" />
      <workItem from="1734365124189" duration="22180000" />
      <workItem from="1734518370572" duration="8735000" />
      <workItem from="1734546006114" duration="2489000" />
      <workItem from="1734589344377" duration="13219000" />
      <workItem from="1734631594948" duration="5462000" />
      <workItem from="1734709633319" duration="2831000" />
      <workItem from="1734757939113" duration="21475000" />
      <workItem from="1734849392158" duration="6577000" />
      <workItem from="1734893072341" duration="2274000" />
      <workItem from="1734937802738" duration="20794000" />
      <workItem from="1735109618594" duration="3213000" />
      <workItem from="1735384383947" duration="1073000" />
      <workItem from="1735407671576" duration="1672000" />
      <workItem from="1735416732880" duration="2106000" />
      <workItem from="1735462764856" duration="6515000" />
      <workItem from="1735540206119" duration="9510000" />
      <workItem from="1735629647719" duration="9805000" />
      <workItem from="1735797560122" duration="10370000" />
      <workItem from="1735893241348" duration="1627000" />
      <workItem from="1736424686256" duration="1957000" />
      <workItem from="1736582050768" duration="591000" />
      <workItem from="1737097908414" duration="8831000" />
      <workItem from="1737183711849" duration="608000" />
      <workItem from="1737353439886" duration="3211000" />
    </task>
    <task id="LOCAL-00001" summary="Initial commit">
      <created>1727095638353</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1727095638353</updated>
    </task>
    <task id="LOCAL-00002" summary="Добавлен выбор и поддержка русского и английского языка из property файлов&#10;&#10;добавлено меню для выбора языка - MainMenu.language&#10;добавлена утилита BookUtils для вывода списка всех книг с учетом локали&#10;Реализован выбор сообщений на 2 языках с помощью класса MessageSource и 4 properties файла в 2 группы">
      <created>1727641825169</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1727641825169</updated>
    </task>
    <task id="LOCAL-00003" summary="Константы цвета для вывода в консоль вынесены в property файл &#10;&#10;добавлен property файл color.properties">
      <created>1729000210178</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1729000210178</updated>
    </task>
    <task id="LOCAL-00004" summary="добавлено логирование значения параметров вызова и выходное значение всех сервисных методов">
      <created>1729411092608</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1729411092608</updated>
    </task>
    <task id="LOCAL-00005" summary="добавлена возможность поиска книги по имени">
      <created>1729432319114</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1729432319114</updated>
    </task>
    <task id="LOCAL-00006" summary="Добавлено кеширование данных книги &#10;&#10;При поиске данных книги по ее имени эти данные кешируются в классе LoggingAspect в Map. При повторном запросе такой же книги, ее данные не читаются с диска, а выдаются из кеша. При изменении, добавлении или удалении книги кеш стирается">
      <created>1729453227825</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1729453227825</updated>
    </task>
    <task id="LOCAL-00007" summary="Добавлен инициализационный SQL-скрипт создания таблиц &#10;&#10;Три таблицы, авторы, жанры и книги">
      <created>1733865102230</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1733865102230</updated>
    </task>
    <task id="LOCAL-00008" summary="Обращение к CSV файлу заменено на работу с БД через Spring JDBC">
      <created>1734974956329</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1734974956329</updated>
    </task>
    <option name="localTasksCounter" value="9" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="branch">
                    <value>
                      <list>
                        <option value="task3" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Initial commit" />
    <MESSAGE value="Добавлен выбор и поддержка русского и английского языка из property файлов&#10;&#10;добавлено меню для выбора языка - MainMenu.language&#10;добавлена утилита BookUtils для вывода списка всех книг с учетом локали&#10;Реализован выбор сообщений на 2 языках с помощью класса MessageSource и 4 properties файла в 2 группы" />
    <MESSAGE value="Константы цвета для вывода в консоль вынесены в property файл &#10;&#10;добавлен property файл color.properties" />
    <MESSAGE value="добавлено логирование значения параметров вызова и выходное значение всех сервисных методов" />
    <MESSAGE value="добавлена возможность поиска книги по имени" />
    <MESSAGE value="Добавлено кеширование данных книги &#10;&#10;При поиске данных книги по ее имени эти данные кешируются в классе LoggingAspect в Map. При повторном запросе такой же книги, ее данные не читаются с диска, а выдаются из кеша. При изменении, добавлении или удалении книги кеш стирается" />
    <MESSAGE value="Добавлен инициализационный SQL-скрипт создания таблиц &#10;&#10;Три таблицы, авторы, жанры и книги" />
    <MESSAGE value="Обращение к CSV файлу заменено на работу с БД через Spring JDBC" />
    <option name="LAST_COMMIT_MESSAGE" value="Обращение к CSV файлу заменено на работу с БД через Spring JDBC" />
  </component>
  <component name="XDebuggerManager">
    <watches-manager>
      <configuration name="GradleRunConfiguration">
        <watch expression="book.getGenre().getName()" language="JAVA" />
      </configuration>
    </watches-manager>
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
  <component name="com.github.evgenys91.machinet.common.dslhistory.DslHistoryState">
    <option name="historyDtoById">
      <map>
        <entry key="551846">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/controller/BookInputHandler.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Book.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/repository/BookRepository.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/utils/MessageKeys.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Genre.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Author.java" />
                </list>
              </option>
              <option name="id" value="551846" />
              <option name="initiateTms" value="1737372264581" />
              <option name="request" value=" почему при изменении поля private  String error на private final String error в классе BookInputHandler при компиляции просиходит ошибка Exception in thread &quot;main&quot; org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'bookInputHandler' defined in file [C:\java\IdeaProjects\Itexus-books\build\classes\java\main\org\example\controller\BookInputHandler.class]: Unsatisfied dependency expressed through constructor parameter 0: No qualifying bean of type 'java.lang.String' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}" />
              <option name="response" value="" />
              <option name="responseDescription" value="Ошибка, которую вы наблюдаете, связана с тем, что Spring пытается внедрить значение для поля `error` через конструктор, но не может найти подходящий bean типа `String`. Когда вы делаете поле `error` `final`, Spring ожидает, что это значение будет передано через конструктор, так как `final` поля должны быть инициализированы при создании объекта.&#10;&#10;В вашем случае, вы используете аннотацию `@Value` для внедрения значения из конфигурации, и это значение должно быть установлено через сеттер или непосредственно в поле, а не через конструктор.&#10;&#10;### Решение&#10;&#10;1. Убедитесь, что поле `error` не является `final`.&#10;2. Используйте аннотацию `@Value` для внедрения значения в поле.&#10;&#10;### Обновленный класс `BookInputHandler`:&#10;&#10;```java&#10;package org.example.controller;&#10;&#10;import lombok.RequiredArgsConstructor;&#10;import org.example.model.Book;&#10;import org.example.repository.BookRepository;&#10;import org.example.utils.MessageKeys;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.MessageSource;&#10;import org.springframework.stereotype.Controller;&#10;&#10;import java.io.BufferedReader;&#10;import java.io.IOException;&#10;import java.io.InputStreamReader;&#10;import java.nio.charset.StandardCharsets;&#10;import java.util.Locale;&#10;&#10;/**&#10; * Класс для обработки ввода данных о книгах от пользователя.&#10; * Этот класс отвечает за получение данных о книгах от пользователя через консоль.&#10; */&#10;@Controller&#10;@RequiredArgsConstructor&#10;public class BookInputHandler {&#10;&#10;    @Value(&quot;${color.error}&quot;)&#10;    private String error;&#10;&#10;    @Value(&quot;${color.reset}&quot;)&#10;    private String reset;&#10;&#10;    private final MessageSource messageSource;&#10;    private final BookRepository bookRepository;&#10;    private final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));&#10;&#10;    /**&#10;     * Получает данные о новой книге от пользователя.&#10;     *&#10;     * @param currentLocale локаль языка, установленная пользователем.&#10;     * @return книгу {@link Book}, для добавления в файл&#10;     */&#10;    public Book newBookDetails(Locale currentLocale) {&#10;&#10;        System.out.println(messageSource.getMessage(MessageKeys.READ_NEW_TITLE, null, currentLocale));&#10;        String title = readLine();&#10;&#10;        System.out.println(messageSource.getMessage(MessageKeys.READ_NEW_AUTHOR, null, currentLocale));&#10;        String author = readLine();&#10;&#10;        System.out.println(messageSource.getMessage(MessageKeys.READ_NEW_DESCRIPTION, null, currentLocale));&#10;        String description = readLine();&#10;&#10;        System.out.println(messageSource.getMessage(MessageKeys.READ_NEW_GENRE, null, currentLocale));&#10;        String genre = readLine();&#10;&#10;        return new Book(title, author, description, genre);&#10;    }&#10;&#10;    /**&#10;     * Запрашивает у пользователя данные для поиска существующей книги по названию.&#10;     *&#10;     * @param currentLocale локаль языка, установленная пользователем.&#10;     * @return строку с названием книги.&#10;     */&#10;    public String findBookDetails(Locale currentLocale) {&#10;        System.out.println(messageSource.getMessage(MessageKeys.READ_ADD_TITLE, null, currentLocale));&#10;        return readLine();&#10;    }&#10;&#10;    /**&#10;     * Запрашивает у пользователя данные для редактирования существующей книги.&#10;     * Если книги с таким id нет, то выводит ошибку и возвращает null&#10;     *&#10;     * @param currentLocale локаль языка, установленная пользователем.&#10;     * @return книгу {@link Book} с данными для изменения книги.&#10;     */&#10;    public Book updateBookDetails(Locale currentLocale) {&#10;&#10;        int id = getValidBookId(&#10;                messageSource.getMessage(MessageKeys.READ_NEW_ID, null, currentLocale), currentLocale);&#10;&#10;        if (bookRepository.existById(id)) {&#10;            System.out.println(messageSource.getMessage(MessageKeys.READ_ADD_TITLE, null, currentLocale));&#10;            String title = readLine();&#10;&#10;            System.out.println(messageSource.getMessage(MessageKeys.READ_ADD_AUTHOR, null, currentLocale));&#10;            String author = readLine();&#10;&#10;            System.out.println(messageSource.getMessage(MessageKeys.READ_ADD_DESCRIPTION, null, currentLocale));&#10;            String description = readLine();&#10;&#10;            System.out.println(messageSource.getMessage(MessageKeys.READ_ADD_GENRE, null, currentLocale));&#10;            String genre = readLine();&#10;&#10;            return new Book(id, title, author, description, genre);&#10;        } else {&#10;            System.out.println(error + messageSource.getMessage(MessageKeys.NOT_FOUND_BOOK_BY_ID,&#10;                    null, currentLocale) + reset);&#10;            return null;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Запрашивает у пользователя ID книги для удаления.&#10;     *&#10;     * @param currentLocale локаль языка, установленная пользователем.&#10;     * @return ID книги, введенный пользователем.&#10;     */&#10;    public int deleteBookDetails(Locale currentLocale) {&#10;        return getValidBookId(&#10;                messageSource.getMessage(MessageKeys.READ_DELETE_ID, null, currentLocale), currentLocale);&#10;    }&#10;&#10;    /**&#10;     * Запрашивает у пользователя корректный ID книги,&#10;     * проверяет, что введенное значение является положительным числом.&#10;     *&#10;     * @param prompt        сообщение, отображаемое пользователю для ввода ID.&#10;     * @param currentLocale локаль языка, установленная пользователем.&#10;     * @return корректный ID книги.&#10;     */&#10;    private int getValidBookId(String prompt, Locale currentLocale) {&#10;        int id = -1;&#10;        while (id &lt; 0) {&#10;            System.out.println(prompt);&#10;            try {&#10;                id = Integer.parseInt(readLine());&#10;                if (id &lt; 0) {&#10;                    System.out.println(&#10;                            error +&#10;                                    messageSource.getMessage(MessageKeys.INVALID_ID, null, currentLocale) +&#10;                                    reset);&#10;                }&#10;            } catch (NumberFormatException e) {&#10;                System.out.println(&#10;                        error +&#10;                                messageSource.getMessage(MessageKeys.NOT_NUMBER, null, currentLocale) +&#10;                                reset);&#10;            }&#10;        }&#10;        return id;&#10;    }&#10;&#10;    /**&#10;     * Читает строку из консоли.&#10;     *&#10;     * @return введенная строка.&#10;     */&#10;    private String readLine() {&#10;        try {&#10;            return reader.readLine().trim();&#10;        } catch (IOException e) {&#10;            return &quot;&quot;;&#10;        }&#10;    }&#10;}&#10;```&#10;&#10;Теперь поле `error` не является `final`, и Spring сможет корректно внедрить значение из конфигурации." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1737372287705" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Book.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/controller/BookInputHandler.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/repository/BookRepository.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Genre.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/utils/MessageKeys.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Author.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="63a659">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Book.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/Books.java" />
                </list>
              </option>
              <option name="id" value="63a659" />
              <option name="initiateTms" value="1737372695455" />
              <option name="request" value=" как должны называться таблицы в БД - в множественном числе или в единственном числе?&#10;books или book?" />
              <option name="response" value="" />
              <option name="responseDescription" value="Вопрос о том, как называть таблицы в базе данных — в единственном или множественном числе — является предметом стиля и соглашений, и нет строгого правила, которое бы диктовало один подход над другим. Однако, существуют некоторые общепринятые практики и рекомендации, которые могут помочь вам принять решение.&#10;&#10;### Общепринятые практики:&#10;&#10;1. **Множественное число**:&#10;   - **Преимущества**:&#10;     - Логически соответствует тому, что таблица содержит множество записей (строк).&#10;     - Часто используется в реляционных базах данных.&#10;   - **Примеры**:&#10;     - `books`&#10;     - `authors`&#10;     - `genres`&#10;&#10;2. **Единственное число**:&#10;   - **Преимущества**:&#10;     - Может быть более интуитивным при моделировании сущностей (например, таблица представляет собой сущность `book`).&#10;     - Часто используется в объектно-ориентированном программировании и некоторых ORM (Object-Relational Mapping) системах.&#10;   - **Примеры**:&#10;     - `book`&#10;     - `author`&#10;     - `genre`&#10;&#10;### Рекомендации:&#10;&#10;- **Согласованность**: Независимо от того, какой стиль вы выберете, важно придерживаться его последовательно во всей базе данных. Это поможет избежать путаницы и упростит поддержку кода.&#10;- **Соглашения команды**: Если вы работаете в команде, согласуйте стиль именования с коллегами и задокументируйте это соглашение.&#10;- **ORM и фреймворки**: Если вы используете ORM или фреймворки, такие как Hibernate, JPA, или Spring Data, обратите внимание на их рекомендации и соглашения по именованию.&#10;&#10;### Пример:&#10;&#10;Если вы решите использовать множественное число, ваши таблицы могут называться так:&#10;- `books`&#10;- `authors`&#10;- `genres`&#10;&#10;Если вы решите использовать единственное число, ваши таблицы могут называться так:&#10;- `book`&#10;- `author`&#10;- `genre`&#10;&#10;### Личный совет:&#10;&#10;В большинстве случаев, использование множественного числа для имен таблиц является более распространенной практикой в реляционных базах данных. Это делает структуру базы данных более интуитивной, особенно для новых разработчиков, которые могут присоединиться к проекту.&#10;&#10;Таким образом, я бы рекомендовал использовать множественное число для имен таблиц:&#10;- `books`&#10;- `authors`&#10;- `genres`&#10;&#10;Это поможет поддерживать согласованность и ясность в вашей базе данных." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1737372708316" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/model/Book.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/Books.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="e1ed34">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/utils/MessageKeys.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/service/BookService.java" />
                </list>
              </option>
              <option name="id" value="e1ed34" />
              <option name="initiateTms" value="1737130124896" />
              <option name="request" value=" вынеси все текстовые строки из messageSource.getMessage класса BookService в класс  MessageKeys" />
              <option name="response" value="" />
              <option name="responseDescription" value="Для улучшения читаемости и поддержки кода, вынесем все текстовые строки из `messageSource.getMessage` класса `BookService` в класс `MessageKeys`. Это позволит централизовать управление ключами сообщений и упростит их изменение в будущем.&#10;&#10;### Обновленный класс `MessageKeys`:&#10;&#10;```java&#10;package org.example.utils;&#10;&#10;public abstract class MessageKeys {&#10;    public static final String READ_ADD_TITLE = &quot;handler.readAddTitle&quot;;&#10;    public static final String READ_ADD_AUTHOR = &quot;handler.readAddAuthor&quot;;&#10;    public static final String READ_ADD_DESCRIPTION = &quot;handler.readAddDescription&quot;;&#10;    public static final String READ_ADD_GENRE = &quot;handler.readAddGenre&quot;;&#10;    public static final String READ_NEW_TITLE = &quot;handler.readNewTitle&quot;;&#10;    public static final String READ_NEW_AUTHOR = &quot;handler.readNewAuthor&quot;;&#10;    public static final String READ_NEW_DESCRIPTION = &quot;handler.readNewDescription&quot;;&#10;    public static final String READ_NEW_GENRE = &quot;handler.readNewGenre&quot;;&#10;    public static final String READ_NEW_ID = &quot;handler.readNewId&quot;;&#10;    public static final String READ_DELETE_ID = &quot;handler.readDeleteId&quot;;&#10;    public static final String INVALID_ID = &quot;handler.invalidId&quot;;&#10;    public static final String NOT_NUMBER = &quot;handler.notNumber&quot;;&#10;    public static final String NOT_FOUND_BOOK_BY_ID = &quot;service.notFoundBookById&quot;;&#10;&#10;    public static final String MENU_LANGUAGE = &quot;menu.language&quot;;&#10;    public static final String MENU_OPTION1 = &quot;menu.option1&quot;;&#10;    public static final String MENU_OPTION2 = &quot;menu.option2&quot;;&#10;    public static final String MENU_EXIT = &quot;menu.exit&quot;;&#10;    public static final String MENU_EXIT_MESSAGE = &quot;menu.exitMessage&quot;;&#10;    public static final String MENU_INVALID = &quot;menu.invalid&quot;;&#10;    public static final String MENU_NOT_NUMBER = &quot;menu.notNumber&quot;;&#10;    public static final String MENU_ACTION = &quot;menu.action&quot;;&#10;    public static final String MENU_LIST_BOOKS = &quot;menu.listBooks&quot;;&#10;    public static final String MENU_FIND_BOOK = &quot;menu.findBook&quot;;&#10;    public static final String MENU_CREATE_BOOK = &quot;menu.createBook&quot;;&#10;    public static final String MENU_EDIT_BOOK = &quot;menu.editBook&quot;;&#10;    public static final String MENU_DELETE_BOOK = &quot;menu.deleteBook&quot;;&#10;    public static final String MENU_EXIT_ACTION = &quot;menu.exitAction&quot;;&#10;&#10;    public static final String SERVICE_LIST_BOOK = &quot;service.listBook&quot;;&#10;    public static final String BOOK_ID = &quot;book.id&quot;;&#10;    public static final String BOOK_TITLE = &quot;book.title&quot;;&#10;    public static final String BOOK_AUTHOR = &quot;book.author&quot;;&#10;    public static final String BOOK_DESCRIPTION = &quot;book.description&quot;;&#10;    public static final String BOOK_GENRE = &quot;book.genre&quot;;&#10;&#10;    // Новые ключи сообщений для BookService&#10;    public static final String SERVICE_FILE_WRITE_ERROR = &quot;service.fileWriteError&quot;;&#10;    public static final String SERVICE_ADD_BOOK = &quot;service.addBook&quot;;&#10;    public static final String SERVICE_EDIT_BOOK = &quot;service.editBook&quot;;&#10;    public static final String SERVICE_DELETE_BOOK = &quot;service.deleteBook&quot;;&#10;}&#10;```&#10;&#10;### Обновленный класс `BookService`:&#10;&#10;```java&#10;package org.example.service;&#10;&#10;import lombok.RequiredArgsConstructor;&#10;import org.example.model.Author;&#10;import org.example.model.Book;&#10;import org.example.model.Genre;&#10;import org.example.repository.AuthorRepository;&#10;import org.example.repository.BookRepository;&#10;import org.example.repository.GenreRepository;&#10;import org.example.utils.MessageKeys;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.MessageSource;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;/**&#10; * Сервис для управления книгами, хранящимися в БД postgreSQL&#10; * Предоставляет методы для создания, редактирования, удаления и вывода списка книг.&#10; */&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class BookService {&#10;&#10;    /**&#10;     * Цвет текста для отображения ошибок.&#10;     */&#10;    @Value(&quot;${color.error}&quot;)&#10;    private String error;&#10;&#10;    /**&#10;     * Цвет текста для сброса цвета.&#10;     */&#10;    @Value(&quot;${color.reset}&quot;)&#10;    private String reset;&#10;&#10;    /**&#10;     * Источник сообщений для локализации.&#10;     */&#10;    private final MessageSource messageSource;&#10;&#10;    private final BookRepository bookRepository;&#10;    private final GenreRepository genreRepository;&#10;    private final AuthorRepository authorRepository;&#10;&#10;    /**&#10;     * Создает новую книгу и добавляет ее в репозиторий.&#10;     *&#10;     * @param currentLocale локаль языка, установленная пользователем.&#10;     * @param book          Книга для добавления.&#10;     */&#10;    public void createBook(Book book, Locale currentLocale) {&#10;&#10;        checkGenre(book);&#10;        checkAuthor(book);&#10;&#10;        //Пробую записать книгу через репозиторий или вывести ошибку записи&#10;        if (bookRepository.addBook(book) == null) {&#10;            System.out.println(error +&#10;                    messageSource.getMessage(MessageKeys.SERVICE_FILE_WRITE_ERROR, null, currentLocale) +&#10;                    reset);&#10;        } else {&#10;            System.out.println(messageSource.getMessage(MessageKeys.SERVICE_ADD_BOOK, null, currentLocale));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Возвращает список всех книг или null если список пуст.&#10;     */&#10;    public List&lt;Book&gt; readBooks(Locale currentLocale) {&#10;        List&lt;Book&gt; books = bookRepository.readBooks();&#10;        if (books.isEmpty()) {&#10;            return null;&#10;        } else {&#10;            return books;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Редактирует существующую книгу.&#10;     *&#10;     * @param currentLocale локаль языка, установленная пользователем.&#10;     * @param updatedBook   Книга, которую нужно обновить.&#10;     */&#10;    public void editBook(Book updatedBook, Locale currentLocale) {&#10;        if (updatedBook != null) {&#10;            checkAuthor(updatedBook);&#10;            checkGenre(updatedBook);&#10;            bookRepository.editBook(updatedBook);&#10;            System.out.println(messageSource.getMessage(MessageKeys.SERVICE_EDIT_BOOK, null, currentLocale));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Удаляет книгу из репозитория по ID.&#10;     *&#10;     * @param currentLocale локаль языка, установленная пользователем.&#10;     * @param id            ID книги для удаления.&#10;     */&#10;    public void deleteBook(int id, Locale currentLocale) {&#10;        if (bookRepository.existById(id)) {&#10;            bookRepository.deleteBook(id);&#10;            System.out.println(messageSource.getMessage(MessageKeys.SERVICE_DELETE_BOOK, null, currentLocale));&#10;        } else {&#10;            System.out.println(error + messageSource.getMessage(MessageKeys.NOT_FOUND_BOOK_BY_ID,&#10;                    null, currentLocale) + reset);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Возвращает список книг по названию книги.&#10;     *&#10;     * @param bookName Название книги&#10;     * @return список книг с данным названием без учета заглавных букв.&#10;     */&#10;    public List&lt;Book&gt; findBooksByName(String bookName) {&#10;        return bookRepository.findBooksByName(bookName);&#10;    }&#10;&#10;    /**&#10;     * Проверяет наличие автора в базе данных. Если автор не существует, добавляет нового автора.&#10;     * Если автор существует, обновляет объект книги с данными существующего автора.&#10;     *&#10;     * @param book Книга, для которой необходимо проверить и установить автора.&#10;     */&#10;    private void checkAuthor(Book book) {&#10;        if (!authorRepository.existByAuthor(book.getAuthor().getName())) {&#10;            Author newAuthor = authorRepository.addAuthor(book.getAuthor());&#10;            book.setAuthor(newAuthor);&#10;        } else {&#10;            Author oldAuthor = authorRepository.findAuthor(book.getAuthor().getName());&#10;            book.setAuthor(oldAuthor);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Проверяет наличие жанра в базе данных. Если жанр не существует, добавляет новый жанр.&#10;     * Если жанр существует, обновляет объект книги с данными существующего жанра.&#10;     *&#10;     * @param book Книга, для которой необходимо проверить и установить жанр.&#10;     */&#10;    private void checkGenre(Book book) {&#10;        if (!genreRepository.existByGenre(book.getGenre().getName())) {&#10;            Genre newGenre = genreRepository.addGenre(book.getGenre());&#10;            book.setGenre(newGenre);&#10;        } else {&#10;            Genre oldGenre = genreRepository.findGenre(book.getGenre().getName());&#10;            book.setGenre(oldGenre);&#10;        }&#10;    }&#10;}&#10;```&#10;&#10;Теперь все ключи сообщений вынесены в класс `MessageKeys`, что делает код более чистым и удобным для поддержки." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1737130151900" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/org/example/service/BookService.java" />
                  <option value="$PROJECT_DIR$/src/main/java/org/example/utils/MessageKeys.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>